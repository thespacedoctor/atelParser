[nosetests]
; NOSE INFO
; ==========================
; Output nose version and exit
;version

; Output list of available plugins and exit. Combine with higher verbosity for greater detail
; plugins


; BASIC SETUP
; ===========================
; Be more verbose
verbosity=3

; Be less verbose
; quiet=DEFAULT

; Load conﬁguration from conﬁg ﬁle(s). May be speciﬁed multiple times; in that case, all conﬁg ﬁles will be loaded and combined
; config=FILES

; Add detail to error output by attempting to evaluate failed asserts [NOSE_DETAILED_ERRORS]
detailed-errors=

; Stop running tests after the ﬁrst error or failure
; stop

; Spread test run among this many processes. Set a number equal to the number of processors or cores in your machine for best results. Pass a negative number to have the number of processes automatically set to the number of cores. Passing 0 means to disable parallel testing. Default is 0 unless NOSE_PROCESSES is set. [NOSE_PROCESSES]
; processes=2

; Set timeout for return of results from each test runner process. Default is 10. [NOSE_PROCESS_TIMEOUT]
process-timeout=10

; If set, will restart each worker process once their tests are done, this helps control memory leaks from killing the system. [NOSE_PROCESS_RESTARTWORKER]
process-restartworker=

; Enable plugin AllModules: Collect tests from all python modules. [NOSE_ALL_MODULES]
; all-modules=

; Enable collect-only: Collect and output test names only, don’t run any tests. [COLLECT_ONLY]
; collect-only=

rednose=
; force-color=


; TESTID PLUGIN SETUP
; =======================
; Enable plugin TestId: Activate to add a test id (like #1) to each test name output. Activate with –failed to rerun failing tests only. [NOSE_WITH_ID]
; with-id=

; Store test ids found in test runs in this ﬁle. Default is the ﬁle .noseids in the working directory.
; id-file=FILE

; Run the tests that failed in the last test run.
; failed=


; LOGGING / DEBUGGING
; ==========================
; Activate debug logging for one or more systems. Available debug loggers: nose, nose.importer, nose.inspector, nose.plugins, nose.result and nose.selector. Separate multiple names with a comma.
debug=DEFAULT

; Log debug messages to this ﬁle (default: sys.stderr)
debug-log=tests/output/nosetest_debug.log

; Load logging conﬁg from this ﬁle – bypasses all other logging conﬁg settings.
; logging-config=

; Don’t capture stdout (any stdout output will be printed immediately) [NOSE_NOCAPTURE]
nocapture=

; Disable logging capture plugin. Logging conﬁgurtion will be left intact. [NOSE_NOLOGCAPTURE]
; nologcapture=

; Specify custom format to print statements. Uses the same format as used by standard logging handlers.
; [NOSE_LOGFORMAT]
logging-format='* %(asctime)s - %(name)s - %(levelname)s (%(pathname)s > %(funcName)s > %(lineno)d) - %(message)s  '

; Specify custom date/time format to print statements. Uses the same format as used by standard logging handlers.
; [NOSE_LOGDATEFMT]
logging-datefmt='%Y/%m/%d %H:%M:%S'

; Specify which statements to ﬁlter in/out. By default, everything is captured. If the output is too verbose, use this option to ﬁlter out needless output. Example: ﬁlter=foo will capture statements issued ONLY to foo or foo.what.ever.sub but not foobar or other logger. Specify multiple loggers with comma: ﬁlter=foo,bar,baz. If any logger name is preﬁxed with a minus, eg ﬁlter=-foo, it will be excluded rather than included. Default: exclude logging messages from nose itself (-nose). [NOSE_LOGFILTER]
; logging-filter=FILTER

; Clear all other logging handlers
; logging-clear-handlers=

; Set the log level to capture
; logging-level=DEFAULT

; Drop into debugger on errors
; pdb=

; Drop into debugger on failures
; pdb-failures=


; CHOOSE WHAT TO TEST
; ==========================
; Run these tests (comma-separated list). This argument is useful mainly from conﬁguration ﬁles; on the command line, just pass the tests to run as additional arguments with no switch.
; tests=NAMES

; Look for tests in this directory. May be speciﬁed multiple times. The ﬁrst directory passed will be used as theworking directory, in place of the current working directory, which is the default. Others will be added to thelist of tests to execute. [NOSE_WHERE]
; where=WHERE

; Files, directories, function names, and class names that match this regular expression are considered tests. Default: (?:^|[b_./-])[Tt]est [NOSE_TESTMATCH]
; testmatch=REGEX

; Completely ignore any ﬁle that matches this regular expression. Takes precedence over any other settings or plugins. Specifying this option will replace the default setting. Specify this option multiple times to add more regular expressions [NOSE_IGNORE_FILES]
; ignore-files=REGEX

; Don’t run tests that match regular expression [NOSE_EXCLUDE]
; exclude=REGEX

; This regular expression will be applied to ﬁles, directories, function names, and class names for a chance to include additional tests that do not match TESTMATCH. Specify this option multiple times to add more regular expressions [NOSE_INCLUDE]
; include=REGEX

; Traverse through all path entries of a namespace package
; traverse-namespace=

; Look for tests in python modules that are executable. Normal behavior is to exclude executable modules, since
; they may not be import-safe [NOSE_INCLUDE_EXE]
; exe=

; DO NOT look for tests in python modules that are executable. (The default on the windows platform is to do so.)
; noexe=

; Run only tests that have attributes speciﬁed by ATTR [NOSE_ATTR]
; attr=ATTR

; Run only tests for whose attributes the Python expression EXPR evaluates to True [NOSE_EVAL_ATTR]
; eval-attr=EXPR


; PROFILER PLUGIN SETUP
; ==========================
; Enable plugin Proﬁle: Use this plugin to run tests using the hotshot proﬁler. [NOSE_WITH_PROFILE]
; with-profile=

; Set sort order for proﬁler output
; profile-sort=SORT

; Proﬁler stats ﬁle; default is a new temp ﬁle on each run
; profile-stats-file=FILE

; Restrict proﬁler output. See help for pstats.Stats for details
; profile-restrict=RESTRICT


; DOCTEST PLUGIN SETUP
; =========================
; Enable plugin Doctest: Activate doctest plugin to ﬁnd and run doctests in non-test modules. [NOSE_WITH_DOCTEST]
; with-doctest=

; Also look for doctests in test modules. Note that classes, methods and functions should have either doctests or non-doctest tests, not both. [NOSE_DOCTEST_TESTS]
; doctest-tests=

; Also look for doctests in ﬁles with this extension [NOSE_DOCTEST_EXTENSION]
; doctest-extension=EXT

; Change the variable name set to the result of the last interpreter command from the default ‘_’. Can be used to avoid conﬂicts with the _() function used for text translation. [NOSE_DOCTEST_RESULT_VAR]
; doctest-result-variable=VAR

; Find ﬁxtures for a doctest ﬁle in module with this name appended to the base name of the doctest ﬁle
; doctest-fixtures=SUFFIX

; Specify options to pass to doctest. Eg. ‘+ELLIPSIS,+NORMALIZE_WHITESPACE’
; doctest-options=OPTIONS


; ADVANCED SETUP AND TWEAKS
; ======================================
; Prevent nose from byte-compiling the source into .pyc ﬁles while nose is scanning for and running tests.
; no-byte-compile=

; nose’s importer will normally evict a package from sys.modules if it sees a package with the same name in a different location. Set this option to disable that behavior.
; first-pkg-wins=

; Disable special handling of DeprecatedTest exceptions.
; no-deprecated=

; Don’t make any changes to sys.path when loading tests [NOSE_NOPATH]
; no-path-adjustment=

; Disable special handling of SkipTest exceptions.
; no-skip=


; COVERAGE PLUGIN SETUP
; ==============================
; Enable plugin Coverage: Activate a coverage report using Ned Batchelder’s coverage module. [NOSE_WITH_COVERAGE]
with-coverage=

; Restrict coverage output to selected packages [NOSE_COVER_PACKAGE]
cover-package=pessto_marshall_engine

; Erase previously collected coverage statistics before run
cover-erase=

; Include test modules in coverage report [NOSE_COVER_TESTS]
;cover-tests=

; Minimum percentage of coverage for teststo pass [NOSE_COVER_MIN_PERCENTAGE]
; cover-min-percentage=DEFAULT

; Include all python ﬁles under working directory in coverage report. Useful for discovering holes in test coverage if not all ﬁles are imported by the test suite. [NOSE_COVER_INCLUSIVE]
; cover-inclusive=

; Produce HTML coverage information
; cover-html=

; Produce HTML coverage information in dir
; cover-html-dir=html_test_coverage_report

; Include branch coverage in coverage report [NOSE_COVER_BRANCHES]
; cover-branches=

; Produce XML coverage information
; cover-xml=

; Produce XML coverage information in ﬁle
; cover-xml-file=FILE


; ISOLATION PLUGIN SEUP
; =======================
; Enable plugin IsolationPlugin: Activate the isolation plugin to isolate changes to external modules to a single test module or package. The isolation plugin resets the contents of sys.modules after each test module or package runs to its state before the test. PLEASE NOTE that this plugin should not be used with the coverage plugin, or in any other case where module reloading may produce undesirable side-effects. [NOSE_WITH_ISOLATION]
; with-isolation=False


; XUNIT PLUGIN SETUP
; =======================
; Enable plugin Xunit: This plugin provides test results in the standard XUnit XML format. [NOSE_WITH_XUNIT]
; with-xunit=

; Path to xml ﬁle to store the xunit report in. Default is nosetests.xml in the working directory [NOSE_XUNIT_FILE]
; xunit-file=/Users/Dave/Desktop/dave.xml


